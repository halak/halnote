import * as ieee754 from './ieee754';

describe('binary32', () => {
    const binary32 = (input: string) => ieee754.binary32(input.replace(/\s/g, '')).decimal;
    it('Zero', () => {
        expect(binary32('0 00000000 00000000000000000000000')).toEqual('+0');
        expect(binary32('1 00000000 00000000000000000000000')).toEqual('-0');
    });

    it('Infinity', () => {
        expect(binary32('0 11111111 00000000000000000000000')).toEqual('+∞');
        expect(binary32('1 11111111 00000000000000000000000')).toEqual('-∞');
    });

    it('Not a Number', () => {
        expect(binary32('0 11111111 00000000000000000000001')).toEqual('NaN');
        expect(binary32('1 11111111 00000000000000000000010')).toEqual('NaN');
    });

    it('Integer', () => {
        expect(binary32('0 10000101 11100000000000000000000')).toEqual('+120');
        expect(binary32('0 11001100 00110111010001110111101')).toEqual('+183746810753520708354048');
        expect(binary32('0 11111110 11111111111111111111111')).toEqual('+340282346638528859811704183484516925440');
    });

    it('Normal Number', () => {
        expect(binary32('0 10000110 00000000100000000000000')).toEqual('+128.25');
        expect(binary32('0 10000000 10010010000111111011000')).toEqual('+3.1415920257568359375');
        expect(binary32('0 01111110 10000000000000000000000')).toEqual('+0.75');
        expect(binary32('0 01111011 10011001100110011001101')).toEqual('+0.100000001490116119384765625');
        expect(binary32('1 01110101 00000110001001001101111')).toEqual('-0.001000000047497451305389404296875');
    });

    it('Subnormal Number', () => {
        expect(binary32('0 00000000 11111111111111111111111')).toEqual('+0.00000000000000000000000000000000000001175494210692441075487029444849287348827052428745893333857174530571588870475618904265502351336181163787841796875');
    });
});

describe('binary64', () => {
    const binary64 = (input: string) => ieee754.binary64(input.replace(/\s/g, '')).decimal;
    it('Zero', () => {
        expect(binary64('0 00000000000 0000000000000000000000000000000000000000000000000000')).toEqual('+0');
        expect(binary64('1 00000000000 0000000000000000000000000000000000000000000000000000')).toEqual('-0');
    });

    it('Infinity', () => {
        expect(binary64('0 11111111111 0000000000000000000000000000000000000000000000000000')).toEqual('+∞');
        expect(binary64('1 11111111111 0000000000000000000000000000000000000000000000000000')).toEqual('-∞');
    });

    it('Not a Number', () => {
        expect(binary64('0 11111111111 0000000000000000000000000000000000000000000000000001')).toEqual('NaN');
        expect(binary64('1 11111111111 0000000000000000000000000000000000000000000000000010')).toEqual('NaN');
    });
});
